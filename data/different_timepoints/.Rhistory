x <- c(1, 2, 3)
y <- c(2, 3, 4)
plot(x, y)
library(ggplot2)
install.packages("ggplot2")
?seq_along
a <- c(1, 7, 9, 10)
seq_along(a)
?split
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools", version = "3.8")
install.packages("BiocManager")
library(Seurat)
library(Matrix)
output.pagoda <- function(cmatrix, genenames, barcodes, out.dir = ".", option = "sparse"){
# generate matrix for pagoda
# Input:
#   matrix: count matrix - sparse or txt format
#   genenames: vector contains correpsondent genenames
#   barcodes: vector contains barcode information
#   option: sparse - sparse matrix format, count - count matrix format
# Output: matrix.mtx, genes.tsv, barcode.tsv
gene.id <- paste("gene", seq(1, length(genenames), 1), sep = ".")
genes <- data.frame(gene = gene.id, name = rownames(cmatrix))
if(option == "sparse"){
Matrix::writeMM(cmatrix, file = file.path(out.dir, "matrix.mtx"))
} else{
Matrix::writeMM(Matrix(as.matrix(cmatrix), sparse = TRUE), file = file.path(out.dir, "matrix.mtx"))
}
write.table(genes, quote=FALSE, col.names=FALSE,
row.names=FALSE, sep="\t",
file = file.path(out.dir, "genes.tsv"))
write(x = barcodes, file = file.path(out.dir, "barcodes.tsv"))
}
input.dir <- "E:/work/harvard/BICCN/datasets/Zeng.10X.cell"
setwd(input.dir)
file <- "umi_counts.h5"
cmatrix <- Seurat::Read10X_h5(file, ensg.names = FALSE)
mem.limits()
mem.limit()
memory.limit()
memory.size(max = 30000)
cmatrix <- Seurat::Read10X_h5(file, ensg.names = FALSE)
output.pagoda(cmatrix, rownames(cmatrix), colnames(cmatrix))
input.dir <- "E:/work/harvard/BICCN/datasets/Zeng.10X.nuclei"
setwd(input.dir)
file <- "umi_counts.h5"
cmatrix <- Seurat::Read10X_h5(file, ensg.names = FALSE)
input.dir <- "E:/work/harvard/BICCN/datasets/Zeng.10X.cell"
setwd(input.dir)
file <- "removed.umi_counts.h5"
cmatrix <- Seurat::Read10X_h5(file, ensg.names = FALSE)
output.pagoda(cmatrix, rownames(cmatrix), colnames(cmatrix))
input.dir <- "E:/work/harvard/BICCN/datasets/Zeng.10X.nuclei"
setwd(input.dir)
file <- "removed.umi_counts.h5"
cmatrix <- Seurat::Read10X_h5(file, ensg.names = FALSE)
output.pagoda(cmatrix, rownames(cmatrix), colnames(cmatrix))
file <- "umi_counts_Removed.h5"
cmatrix <- Seurat::Read10X_h5(file, ensg.names = FALSE)
output.pagoda(cmatrix, rownames(cmatrix), colnames(cmatrix))
# read smart-seq data
input.dir <- "E:/work/harvard/BICCN/datasets/Zeng.smart.seq.cell"
setwd(input.dir)
cmatrix <- read.table("removed.exon.counts.csv", header = TRUE, sep = ",")
genenames <- cmatrix$X
cmatrix <- cmatrix[, -1]
barcodes <- colnames(cmatrix)
output.pagoda(cmatrix, genenames, barcodes, option = "count")
cmatrix <- read.table("removed.exon.counts.csv", header = TRUE, sep = ",")
getwd()
setwd(input.dir)
cmatrix <- read.table("removed.exon.counts.csv", header = TRUE, sep = ",")
genenames <- cmatrix$X
cmatrix <- cmatrix[, -1]
barcodes <- colnames(cmatrix)
output.pagoda(cmatrix, genenames, barcodes, option = "count")
input.dir <- "E:/work/harvard/BICCN/datasets/Zeng.smart.seq.nuclei"
setwd(input.dir)
cmatrix <- read.table("removed.exon.counts.csv", header = TRUE, sep = ",")
genenames <- cmatrix$X
cmatrix <- cmatrix[, -1]
barcodes <- colnames(cmatrix)
output.pagoda(cmatrix, genenames, barcodes, option = "count")
library("seurat")
?read.10x.matrices
setwd("E:/work/upenn/git/HM_splicing/data/raw/different_timepoints")
HM_file <- read.table("forebrain.mixed.12.5day.H3K4me1.1.bam.sam.hm.signal", sep = "\t", header = T)
head(HM_file)
HM_signal <- list()
i = 1
if(HM_file[i,]$strand == "+"){
chip_left <- as.numeric(unlist(strsplit(as.character(HM_file[i, ]$chip_left), ",")))
chip_right <- as.numeric(unlist(strsplit(as.character(HM_file[i, ]$chip_right), ",")))
} else{
chip_left <- as.numeric(unlist(strsplit(as.character(HM_file[i, ]$chip_right), ",")))
chip_left <- rev(chip_left)
chip_right <- as.numeric(unlist(strsplit(as.character(HM_file[i, ]$chip_left), ",")))
chip_right <- rev(chip_right)
}
chip_left
chip_right
total_reads <- 20000
chip.signal <- (sum(sum(chip_left) + sum(chip_right)) / total_reads) * 1e6
head(chip.signal)
names(HM_signal)
